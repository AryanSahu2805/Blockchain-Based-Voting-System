# Advanced Load Balancer Configuration for Blockchain Voting System
# Supports multiple backend instances, health checks, and intelligent routing

# Upstream definitions for different services
upstream backend_servers {
    # Primary backend servers
    server backend1:5000 max_fails=3 fail_timeout=30s weight=3;
    server backend2:5000 max_fails=3 fail_timeout=30s weight=3;
    server backend3:5000 max_fails=3 fail_timeout=30s weight=2;
    server backend4:5000 max_fails=3 fail_timeout=30s weight=2;
    
    # Health check configuration
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

upstream blockchain_nodes {
    # Blockchain node load balancing
    server hardhat1:8545 max_fails=2 fail_timeout=20s weight=2;
    server hardhat2:8545 max_fails=2 fail_timeout=20s weight=2;
    server hardhat3:8545 max_fails=2 fail_timeout=20s weight=1;
    
    keepalive 16;
    keepalive_requests 50;
    keepalive_timeout 30s;
}

upstream cache_servers {
    # Redis cluster load balancing
    server redis1:6379 max_fails=2 fail_timeout=15s weight=2;
    server redis2:6379 max_fails=2 fail_timeout=15s weight=2;
    server redis3:6379 max_fails=2 fail_timeout=15s weight=1;
    
    keepalive 8;
    keepalive_requests 25;
    keepalive_timeout 20s;
}

upstream storage_servers {
    # IPFS and MinIO load balancing
    server ipfs1:5001 max_fails=2 fail_timeout=20s weight=2;
    server ipfs2:5001 max_fails=2 fail_timeout=20s weight=2;
    server minio1:9000 max_fails=2 fail_timeout=20s weight=2;
    server minio2:9000 max_fails=2 fail_timeout=20s weight=2;
    
    keepalive 16;
    keepalive_requests 50;
    keepalive_timeout 30s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_rate_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=auth_rate_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=voting_rate_limit:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=admin_rate_limit:10m rate=20r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=api_conn_limit:10m;
limit_conn_zone $binary_remote_addr zone=admin_conn_limit:10m;

# Health check endpoint
server {
    listen 8080;
    server_name health.localhost;
    
    location /health {
        access_log off;
        
        # Check backend health
        location /health/backend {
            proxy_pass http://backend_servers/health;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Check blockchain health
        location /health/blockchain {
            proxy_pass http://blockchain_nodes/;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Check cache health
        location /health/cache {
            proxy_pass http://cache_servers/;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Check storage health
        location /health/storage {
            proxy_pass http://storage_servers/;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }
        
        # Overall health status
        location /health/overall {
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}

# Main API load balancer
server {
    listen 80;
    server_name api.localhost;
    
    # Rate limiting
    limit_req zone=api_rate_limit burst=200 nodelay;
    limit_conn api_conn_limit 100;
    
    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # CORS headers
    add_header Access-Control-Allow-Origin "*" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
    
    # API routing with intelligent load balancing
    location /api/ {
        # Authentication endpoints - higher rate limits
        location ~ ^/api/(auth|login|register|siwe) {
            limit_req zone=auth_rate_limit burst=50 nodelay;
            limit_conn api_conn_limit 50;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 60s;
            proxy_connect_timeout 30s;
        }
        
        # Voting endpoints - specific rate limits
        location ~ ^/api/(vote|elections|results) {
            limit_req zone=voting_rate_limit burst=100 nodelay;
            limit_conn api_conn_limit 75;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 120s;
            proxy_connect_timeout 30s;
        }
        
        # Admin endpoints - restricted rate limits
        location ~ ^/api/(admin|analytics|compliance) {
            limit_req zone=admin_rate_limit burst=30 nodelay;
            limit_conn admin_conn_limit 25;
            
            proxy_pass http://backend_servers;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 180s;
            proxy_connect_timeout 30s;
        }
        
        # General API endpoints
        proxy_pass http://backend_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 60s;
        proxy_connect_timeout 30s;
    }
    
    # Blockchain RPC endpoints
    location /blockchain/ {
        proxy_pass http://blockchain_nodes/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 30s;
        proxy_connect_timeout 15s;
    }
    
    # Cache endpoints
    location /cache/ {
        proxy_pass http://cache_servers/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 20s;
        proxy_connect_timeout 10s;
    }
    
    # Storage endpoints
    location /storage/ {
        proxy_pass http://storage_servers/;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 60s;
        proxy_connect_timeout 20s;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# Frontend load balancer
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary Accept-Encoding;
    }
    
    # Handle React Router
    location / {
        try_files $uri $uri/ /index.html;
        
        # Add cache headers for HTML files
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# WebSocket support for real-time features
upstream websocket_servers {
    server backend1:5000;
    server backend2:5000;
    server backend3:5000;
    server backend4:5000;
}

server {
    listen 8081;
    server_name ws.localhost;
    
    location /ws/ {
        proxy_pass http://websocket_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;
    }
}

# Monitoring and metrics endpoint
server {
    listen 8082;
    server_name metrics.localhost;
    
    location /metrics {
        proxy_pass http://backend_servers/metrics;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_read_timeout 30s;
        proxy_connect_timeout 15s;
    }
    
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
}

# SSL configuration (uncomment for production)
# server {
#     listen 443 ssl http2;
#     server_name api.localhost;
#     
#     ssl_certificate /etc/nginx/ssl/api.crt;
#     ssl_certificate_key /etc/nginx/ssl/api.key;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
#     ssl_prefer_server_ciphers off;
#     ssl_session_cache shared:SSL:10m;
#     ssl_session_timeout 10m;
#     
#     # HSTS
#     add_header Strict-Transport-Security "max-age=63072000" always;
#     
#     # Rest of configuration same as HTTP server
# }

# Error pages
error_page 404 /404.html;
error_page 500 502 503 504 /50x.html;

location = /50x.html {
    root /usr/share/nginx/html;
}

location = /404.html {
    root /usr/share/nginx/html;
}

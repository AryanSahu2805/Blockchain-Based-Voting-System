name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../backend && npm ci
          cd ../contracts && npm ci

      - name: Run ESLint (Frontend)
        run: cd client && npm run lint

      - name: Run ESLint (Backend)
        run: cd backend && npm run lint

      - name: Run Prettier check
        run: |
          cd client && npm run format:check
          cd ../backend && npm run format:check

      - name: Security audit
        run: |
          cd client && npm audit --audit-level moderate
          cd ../backend && npm audit --audit-level moderate
          cd ../contracts && npm audit --audit-level moderate

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=blockchain-voting-system
            -Dsonar.sources=.
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}

  # Smart Contract Testing & Security
  smart-contracts:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd contracts && npm ci

      - name: Compile contracts
        run: cd contracts && npm run compile

      - name: Run tests
        run: cd contracts && npm test

      - name: Run coverage
        run: cd contracts && npm run coverage

      - name: Run Slither analysis
        uses: crytic/slither-action@v0.0.3
        with:
          target: 'contracts/'
          args: '--print human-summary --print codebase-summary'

      - name: Run MythX analysis
        uses: ConsenSys/mythx-action@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mythx-version: 'v2.0.0'
          args: '--mode full'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./contracts/coverage.json
          directory: ./contracts/coverage/

  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Run tests
        run: cd backend && npm test

      - name: Run integration tests
        run: cd backend && npm run test:integration

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/coverage.json
          directory: ./backend/coverage/

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd client && npm ci

      - name: Run tests
        run: cd client && npm test -- --coverage --watchAll=false

      - name: Run E2E tests
        run: cd client && npm run test:e2e

      - name: Build application
        run: cd client && npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/coverage.json
          directory: ./client/coverage/

  # Docker Build & Push
  docker-build:
    needs: [code-quality, smart-contracts, backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./client
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Smart Contracts
        uses: docker/build-push-action@v5
        with:
          context: ./contracts
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/contracts:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: kubectl apply -f k8s/staging/

  # Deploy to Production
  deploy-production:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: kubectl apply -f k8s/production/

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'

  # Performance Testing
  performance-test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: cd backend && npm ci

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/elections
            http://localhost:3000/vote
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run Artillery performance tests
        run: |
          cd backend
          npm run test:performance

  # Notifications
  notify:
    needs: [code-quality, smart-contracts, backend-test, frontend-test, docker-build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

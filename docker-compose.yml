version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:5000/api
      - REACT_APP_NETWORK_NAME=mumbai
      - REACT_APP_CHAIN_ID=80001
      - REACT_APP_ENABLE_IPFS_STORAGE=true
      - REACT_APP_ENABLE_GASLESS_VOTING=true
      - REACT_APP_ENABLE_ZK_PROOFS=true
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - voting-network
    restart: unless-stopped

  # Backend Node.js API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/blockchain-voting
      - JWT_SECRET=${JWT_SECRET}
      - MUMBAI_RPC_URL=${MUMBAI_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - SEPOLIA_RPC_URL=${SEPOLIA_RPC_URL}
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - INFURA_PROJECT_ID=${INFURA_PROJECT_ID}
      - IPFS_NODE_URL=${IPFS_NODE_URL}
      - PINATA_API_KEY=${PINATA_API_KEY}
      - PINATA_SECRET_KEY=${PINATA_SECRET_KEY}
      - RELAYER_PRIVATE_KEY=${RELAYER_PRIVATE_KEY}
      - RELAYER_ADDRESS=${RELAYER_ADDRESS}
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      - mongodb
      - ipfs-node
    networks:
      - voting-network
    restart: unless-stopped

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=blockchain-voting
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - voting-network
    restart: unless-stopped

  # IPFS Node
  ipfs-node:
    image: ipfs/kubo:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    environment:
      - IPFS_PROFILE=server
    volumes:
      - ipfs_data:/data/ipfs
      - ipfs_staging:/export
    networks:
      - voting-network
    restart: unless-stopped

  # Hardhat Network (Local Blockchain)
  hardhat:
    build:
      context: ./contracts
      dockerfile: Dockerfile
    ports:
      - "8545:8545"
    environment:
      - NETWORK=hardhat
      - ACCOUNTS=10
      - MNEMONIC=${HARDHAT_MNEMONIC}
    volumes:
      - ./contracts:/app
      - hardhat_data:/app/data
    networks:
      - voting-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voting-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - voting-network
    restart: unless-stopped

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - voting-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - voting-network
    restart: unless-stopped

  # Log Aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - voting-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - voting-network
    restart: unless-stopped

  # File Upload Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - voting-network
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  ipfs_data:
    driver: local
  ipfs_staging:
    driver: local
  hardhat_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  minio_data:
    driver: local

networks:
  voting-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
